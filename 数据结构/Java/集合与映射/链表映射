public class LinkedListMap<K , V> implements Map<K , V> {

    private class Node{
        Node next ;
        K key ;
        V value ;
        public Node(K key , V value , Node next){
            this.key = key ;
            this.value = value ;
            this.next = next ;
        }
        public Node(K key){
            this(key , null , null) ;
        }
        public Node(){
            this(null , null , null) ;
        }
        public String toString(){
            return key.toString() + ":" + value.toString() ;
        }
    }

    private Node dummyHead ;
    private int size ;

    public LinkedListMap(){
        size = 0 ;
        dummyHead = new Node() ;
    }

    public int getSize(){
        return size ;
    }

    public boolean isEmpty(){
        return size == 0 ;
    }

    //辅助函数
    private Node getNode(K key){
        Node cur = dummyHead.next ;
        while(cur != null){
            if (cur.key.equals(key))
                return cur ;
            cur = cur.next ;
        }
        return null ;
    }

    public boolean contains(K key){
        return getNode(key) != null ;
    }

    public V get(K key){
        Node node = getNode(key) ;
        return node == null ? null : node.value ;
    }

    public void add(K key , V value){
        Node node = getNode(key) ;
        if (node == null){
            dummyHead.next = new Node(key , value , dummyHead.next) ;
            size ++ ;
        }else
            node.value = value ;
    }

    public void set(K key , V value){
        Node node = getNode(key) ;
        if (node == null)
            throw new IllegalArgumentException(key + "doesn't exist!") ;
        else
            node.value = value ;
    }

    public V remove(K key){
        Node cur = dummyHead ;
        while (cur.next != null){
            if (cur.next.key.equals(key))
                break;
            cur = cur.next ;
        }
        if (cur.next != null) {
            Node del = cur.next;
            cur.next = del.next;
            del.next = null;
            size -- ;
            return del.value;
        }
        return null ;
    }

}
