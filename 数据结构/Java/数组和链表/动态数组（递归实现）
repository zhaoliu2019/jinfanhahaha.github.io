public class Array_RE<A> {

    private A[] date ;
    private int size ;
    private int temp ;

    public Array_RE(int capacity){
        date = (A[]) new Object[capacity] ;
        size = 0 ;
    }
    public Array_RE(){
        this(10) ;
    }

    public boolean isEmpty(){
        return size == 0 ;
    }

    public int getSize(){
        return size ;
    }

    public int getCapacity(){
        return date.length ;
    }

    private void resize(int newCapacity){
        A[] b = (A[]) new Object[newCapacity] ;
        for (int i = 0 ; i < size ; i ++){
            b[i] = date[i] ;
        }
        date = b ;
    }

    public void add(int index , A a){
        if (index < 0 || index > size)
            throw new IllegalArgumentException("Index is illegal!") ;
        if (size+1 == date.length)
            resize(date.length * 2);
        add(date , index , a , 0) ;
        size ++ ;
    }
    private void add(A[] date , int index , A a , int i ){
        temp = size - index ;
        if (temp == 0){
            date[index-i] = a ;
            return;
        }
        date[size-i] = date[size-1-i] ;
        add(date , index + 1 , a , i + 1) ;
    }

    public void addFirst(A a){
        add(0 , a);
    }

    public void addLast(A a){
        add(size , a);
    }

    public A remove(int index){
        if (index < 0 || index >= size)
            throw new IllegalArgumentException("Index is illegal!") ;
        A del = date[index] ;
        remove(date , index);
        size -- ;
        if (size == date.length / 4 && date.length != 1)
            resize(date.length / 2);
        return del ;
    }
    private void remove(A[] date , int index){
        if (index == size) {
            date[size-1] = null ;
            return;
        }
        date[index] = date[index+1] ;
        remove(date , index+1) ;
    }

    public A removeFirst(){
        return remove(0) ;
    }

    public A removeLast(){
        return remove(size-1) ;
    }

    public boolean contains(A a){
        return contains(a , date , 0) ;
    }
    private boolean contains(A a , A[] date , int i ){
        if (i == size)
            return false ;
        if (date[i].equals(a))
            return true ;
        return contains(a , date , i+1) ;
    }

    public A get(int index){
        if (index < 0 || index >= size)
            throw new IllegalArgumentException("Index is illegal!") ;
        return date[index] ;
    }

    public A getFirst(){
        return get(0) ;
    }

    public A getLast(){
        return get(size-1) ;
    }

    public void removeElements(A a){
        int i = 0 ;
        while(i != size){
            while(date[i].equals(a))
                remove(i) ;
            i ++ ;
        }
    }

    public void set(int index , A a){
        if (index < 0 || index > size-1)
            throw new IllegalArgumentException("Index is illegal!") ;
        date[index] = a ;
    }

    public int findFirst(A a){
        return findFirst(date , a , 0) ;
    }
    private int findFirst(A[] date , A a , int i){
        if (i == size)
            return -1 ;
        if (date[i].equals(a))
            return i ;
        return findFirst(date , a , i + 1) ;
    }

    public Array find(A a){
        Array one = new Array();
        return find(date , a , 0 , one) ;
    }
    private Array find(A[] date , A a , int i , Array one){
        if (i == size){
            if (one.getSize() == 0)
                one.addFirst(-1);
            return one ;
        }
        if (date[i].equals(a))
            one.addLast(i);
        return find(date , a , i+1 , one) ;
    }

    public String toString(){
        StringBuilder str = new StringBuilder();
        str.append(String.format("Array: size = %d , capacity = %d\n[" , size , getCapacity()));
        for (int i = 0 ; i < size ; i ++){
            str.append(date[i]) ;
            if (i != size-1)
                str.append(", ") ;
        }
        str.append("]") ;
        return str.toString() ;
    }

    public static void main(String[] args) {
        Array_RE<Integer> one = new Array_RE<>(10);
        for (int i = 0 ; i < 5 ; i ++)
            one.add(i , i);
        one.remove(3) ;
        one.remove(3) ;
        one.remove(0) ;
        one.remove(0) ;
        one.remove(0) ;
        one.add(0 , 0);
        one.remove(0) ;
        one.add(0 , 0);
        one.add(0,1);
        one.add(0,1);
        System.out.println(one);
        System.out.println(one.contains(1));
        System.out.println(one.getLast());
        System.out.println(one.find(1));
        one.removeElements(1);
        System.out.println(one);
    }
}
