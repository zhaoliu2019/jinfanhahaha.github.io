public class LinkedListQueue<A> implements Queue<A> {
    private class Node{
        Node next;
        A a;
        public Node(Node next,A a){
            this.next = next;
            this.a = a;
        }
        public Node(A a){
            this(null,a);
        }
        public Node(){
            this(null,null);
        }
        public String toString(){
            return a.toString();
        }
    }

    private Node head,tail;
    private int size;
    public LinkedListQueue(){
        head = null;
        tail = null;
        size = 0;
    }

    public boolean isEmpty(){
        return size == 0;
    }

    public int getSize(){
        return size;
    }

    public void enqueue(A a){
        if(tail == null){
            tail = new Node(a);
            head = tail;
        }else{
            tail.next = new Node(a);
            tail = tail.next;
        }
        size ++;
    }

    public A dequeue(){
        if(size == 0)
            throw new IllegalArgumentException("Cannot dequeue from an empty queue");
        Node retNode = head;
        head = head.next;
        retNode.next = null;
        if(head == null)
            tail = null;
        size --;
        return retNode.a;
    }

    public A getFront(){
        if(size == 0)
            throw new IllegalArgumentException("Queue is empty");
        return head.a;
    }

    public String toString(){
        StringBuilder str = new StringBuilder();
        str.append("Queue: front ");
        Node cur = head;
        while(cur != null){
            str.append(cur.a+"->");
            cur = cur.next;
        }
        str.append("Null tail");
        return str.toString();
    }

    public static void main(String[]args){
        LinkedListQueue<Integer> one = new LinkedListQueue<>();
        for(int i = 0;i < 5;i ++){
            one.enqueue(i);
            System.out.println(one);
            if(i % 3 == 0){
                one.dequeue();
                System.out.println(one);
            }
        }
    }
}

