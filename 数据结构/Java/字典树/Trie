import java.util.TreeMap;

public class Trie {

    private class Node{

        public boolean isWord ;
        public TreeMap<Character , Node> next ;

        public Node(boolean isWord){
            this.isWord = isWord ;
            next = new TreeMap<>() ;
        }

        public Node(){
            this(false) ;
        }
    }

    private Node root ;
    private int size ;

    public Trie(){
        root = new Node() ;
        size = 0 ;
    }

    public int size(){
        return size ;
    }

    public boolean isEmpty(){
        return size == 0 ;
    }

    public void add(String word){

        Node cur = root ;
        for (int i = 0 ; i < word.length() ; i ++){
            char w = word.charAt(i) ;
            if (cur.next.get(w) == null)
                cur.next.put(w , new Node()) ;
            cur = cur.next.get(w) ;
        }
        if (!cur.isWord){
            size ++ ;
            cur.isWord = true ;
        }
    }

    public boolean contains(String word){

        Node cur = root ;
        for (int i = 0 ; i < word.length() ; i ++){
            char w = word.charAt(i) ;
            if (cur.next.get(w) == null)
                return false ;
            cur = cur.next.get(w) ;
        }
        return cur.isWord ;
    }

    public boolean isPrefix(String prefix){

        Node cur = root ;
        for (int i = 0 ; i < prefix.length() ; i ++){
            char w = prefix.charAt(i) ;
            if (cur.next.get(w) == null)
                return false ;
            cur = cur.next.get(w) ;
        }
        return true ;
    }

    public boolean search(String word){
        return search(root , word , 0) ;
    }

    private boolean search(Node node , String word , int index){

        Node cur = node ;
        if (index == word.length())
            return cur.isWord ;

        char c = word.charAt(index) ;
        if (c != '.'){
            if (cur.next.get(c) == null)
                return false ;
            return search(cur.next.get(c) , word , index+1) ;
        }
        else {
            for (char w : cur.next.keySet())
                if (search(cur.next.get(w) , word , index+1))
                    return true ;
            return false ;
        }
    }

    public void remove_pl(String word){

        if (word.equals(""))
            return;
        if (!contains(word))
            return;
        Node cur = root ;
        for (int i = 0 ; i < word.length() ; i ++){
            char c = word.charAt(i) ;
            if (remove_pl(cur.next.get(c) , word , i)){
                cur.next.get(c).next = null ;
                cur.next.get(c).isWord = false ;
            }
            cur = cur.next.get(c) ;
        }
        size -- ;

    }

    private boolean remove_pl(Node node , String word , int index){

        Node cur = node ;
        if (word.length() == index){
            if (cur.next.keySet() == null)
                return true ;
            else
                return false ;
        }
        char c = word.charAt(index) ;
        if (cur.next.keySet().size() == 1 && cur.isWord == false)
            return remove_pl(cur.next.get(c) , word , index+1) ;
        else
            return false ;
    }

    //**  待思考  **
    public boolean remove(String word){
        if (word.equals(""))
            return false ;
        return remove(root , word , 0) ;
    }

    private boolean remove(Node node , String word , int index){

        if (word.length() == index){
            if (!node.isWord)
                return false ;
            size -- ;
            node.isWord = false ;
            return true ;
        }
        char c = word.charAt(index);
        if(!node.next.containsKey(c))
            return false;

        boolean ret = remove(node.next.get(c), word, index + 1);
        Node nextNode = node.next.get(c);
        if(!nextNode.isWord && nextNode.next.size() == 0)
            node.next.remove(word.charAt(index));
        return ret;
    }

}
