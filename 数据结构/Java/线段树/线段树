public class SegmentTree<A> {

    private A[] data ;
    private A[] tree ;
    private Merger<A> merger ;

    public SegmentTree(A[] a , Merger<A> merger){
        data = (A[]) new Object[a.length] ;
        for (int i = 0 ; i < data.length ; i ++)
            data[i] = a[i] ;
        tree = (A[]) new Object[a.length*4] ;
        this.merger = merger ;
        buildSegmentTree(0, 0, a.length - 1);
    }

    public int getSize(){
        return data.length ;
    }

    public A get(int index){
        if(index < 0 || index >= data.length)
            throw new IllegalArgumentException("Index is illegal.");
        return data[index] ;
    }

    private int leftChild(int i){
        return i*2 + 1 ;
    }

    private int rightChild(int i){
        return i*2 + 2 ;
    }

    private void buildSegmentTree(int treeIndex , int l , int r){
        if (r == l){
            tree[treeIndex] = data[l] ;
            return;
        }
        int leftTreeIndex = leftChild(treeIndex);
        int rightTreeIndex = rightChild(treeIndex);
        int mid = l + (r - l) / 2;
        //tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);
        buildSegmentTree(leftTreeIndex, l, mid);
        buildSegmentTree(rightTreeIndex, mid + 1, r);
        tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);
    }

    public A query(int queryL , int queryR){
        if (queryL < 0 || queryL >= data.length || queryR < 0 || queryR
            > data.length-1 || queryL > queryR)
            throw new IllegalArgumentException("Index is illegal") ;
        return query(0 , 0 , data.length-1 , queryL , queryR) ;
    }

    private A query(int treeIndex , int l , int r , int queryL , int queryR){

        if (queryL == l && queryR == r)
            return tree[treeIndex] ;

        int leftChild = leftChild(treeIndex) ;
        int rightChild = rightChild(treeIndex) ;
        int mid = l + (r-l) / 2 ;

        if (queryL >= mid+1)
            return query(rightChild , mid+1 , r , queryL , queryR) ;
        else if(queryR <= mid)
            return query(leftChild , l , mid , queryL , queryR) ;
        A leftResult = query(leftChild , l , mid , queryL , mid) ;
        A rightResult = query(rightChild , mid+1 , r , mid+1 , queryR) ;
        return merger.merge(leftResult , rightResult) ;
    }

    public void set(int index , A a){
        if (index < 0 || index >= data.length)
            throw new IllegalArgumentException("Index is illegal!") ;
        data[index] = a ;
        set(0 , 0 , data.length-1 , index , a);
    }

    private void set(int treeIndex , int l , int r , int index , A a){

        if (l == r){
            tree[treeIndex] = a ;
            return;
        }

        int mid = l + (r-l) / 2 ;
        int leftTreeIndex = leftChild(treeIndex) ;
        int rightTreeIndex = rightChild(treeIndex) ;
        if (index >= mid+1)
            set(rightTreeIndex , mid+1 , r , index , a);
        else
            set(leftTreeIndex , l , mid , index , a);

        tree[treeIndex] = merger.merge(tree[leftTreeIndex] , tree[rightTreeIndex]) ;
    }

    public String toString(){
        StringBuilder res = new StringBuilder();
        res.append('[');
        for(int i = 0 ; i < tree.length ; i ++){
            if(tree[i] != null)
                res.append(tree[i]);
            else
                res.append("null");

            if(i != tree.length - 1)
                res.append(", ");
        }
        res.append(']');
        return res.toString();
    }

    public static void main(String[] args) {
        Integer[] nums = {-2, 0, 3, -5, 2, -1};
        /*SegmentTree segmentTree = new SegmentTree(nums, new Merger<Integer>() {
            @Override
            public Integer merge(Integer o, Integer b) {
                return o + b ;
            }
        });
        */
        SegmentTree<Integer> segmentTree = new SegmentTree<Integer>(nums , (a , b) -> a+b);
        System.out.println(segmentTree);
        System.out.println(segmentTree.query(0,2));
    }
}
